Create a Project Folder:
Name it budget_tracker and navigate into it:
bash

Collapse

Wrap

Copy
mkdir budget_tracker
cd budget_tracker
Install Flask:
Run this command in your terminal:
bash

Collapse

Wrap

Copy
pip install flask
SQLite is built into Python, so no additional installation is needed.
Create Files:
app.py (backend)
index.html (frontend)
Step 2: Build the Backend (Python + SQL)
The backend will:

Use Flask to create an API endpoint (/track).
Store expenses in an SQLite database (budget.db).
Return the total spending for the entered category.
Here’s the complete backend code:

python

Collapse

Wrap

Copy
# app.py
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect("budget.db")
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS expenses (category TEXT, amount REAL)")
    conn.commit()
    conn.close()

@app.route("/track", methods=["POST"])
def track():
    # Get data from frontend
    category = request.json["category"].lower()
    amount = float(request.json["amount"])
    
    # Insert expense into database
    conn = sqlite3.connect("budget.db")
    c = conn.cursor()
    c.execute("INSERT INTO expenses (category, amount) VALUES (?, ?)", (category, amount))
    conn.commit()
    
    # Calculate total for the category
    c.execute("SELECT SUM(amount) FROM expenses WHERE category = ?", (category,))
    total = c.fetchone()[0] or amount  # If no previous entries, use current amount
    conn.close()
    
    return jsonify({"total_spent": total})

if __name__ == "__main__":
    init_db()  # Create database on startup
    app.run(debug=True)
Explanation:

init_db(): Creates a table expenses with columns category (text) and amount (real number) if it doesn’t exist.
/track Endpoint: Accepts a POST request with JSON data (category and amount), stores it, and returns the total spending for that category.
SQLite: Uses budget.db to persist data.
Step 3: Build the Frontend (HTML/CSS/JS)
The frontend will:

Provide a form for users to input category and amount.
Send data to the backend via a POST request.
Display the total spending returned by the backend.
Here’s the complete frontend code:

html

Preview

Collapse

Wrap

Copy
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal Budget Tracker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        input, button {
            padding: 10px;
            margin: 5px;
        }
        #result {
            margin-top: 20px;
            font-size: 18px;
        }
    </style>
</head>
<body>
    <h1>Personal Budget Tracker</h1>
    <input type="text" id="category" placeholder="Enter category (e.g., food)">
    <input type="number" id="amount" placeholder="Enter amount (e.g., 10.50)" step="0.01">
    <button onclick="trackExpense()">Add Expense</button>
    <div id="result"></div>

    <script>
        async function trackExpense() {
            const category = document.getElementById("category").value;
            const amount = document.getElementById("amount").value;

            if (!category || !amount) {
                alert("Please fill in both fields!");
                return;
            }

            try {
                const response = await fetch("http://localhost:5000/track", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ category: category, amount: amount })
                });
                const data = await response.json();
                document.getElementById("result").innerText = 
                    `Total spent on ${category}: $${data.total_spent.toFixed(2)}`;
            } catch (error) {
                document.getElementById("result").innerText = "Error connecting to server!";
                console.error(error);
            }
        }
    </script>
</body>
</html>
Explanation:

HTML: A form with inputs for category (text) and amount (number), plus a button to submit.
CSS: Basic styling for centering and spacing.
JavaScript: trackExpense() sends a POST request to /track with the user’s input and displays the total spending.
Step 4: Test Locally
Run the Backend:
In your terminal, navigate to the budget_tracker folder and run:
bash

Collapse

Wrap

Copy
python app.py
You’ll see output indicating Flask is running on http://localhost:5000.
Run the Frontend:
Open index.html in a web browser (e.g., drag it into Chrome or use a local server like live-server if you have Node.js installed: npx live-server).
Test It:
Enter a category (e.g., “food”) and amount (e.g., “5.25”), then click “Add Expense.”
Check the result (e.g., “Total spent on food: $5.25”).
Add another expense in the same category (e.g., “food”, “3.75”)—the total should update (e.g., “Total spent on food: $9.00”).
Step 5: Verify the Database
After adding expenses, check budget.db in your project folder.
Use a tool like DB Browser for SQLite (free download) to open it and see the expenses table with your entries.
Step 6: Troubleshooting
CORS Error: If the frontend can’t connect, add this to app.py:
python

Collapse

Wrap

Copy
from flask_cors import CORS
CORS(app)
Then restart the backend.
No Result: Ensure the backend is running and the frontend is sending data to http://localhost:5000/track.
Invalid Input: The frontend checks for empty fields, but you can add more validation (e.g., positive amounts) if needed.
Step 7: Optional Enhancements
Clear Database: Add a button to reset the database:
Backend: Add a new endpoint:
python

Collapse

Wrap

Copy
@app.route("/reset", methods=["POST"])
def reset():
    conn = sqlite3.connect("budget.db")
    c = conn.cursor()
    c.execute("DELETE FROM expenses")
    conn.commit()
    conn.close()
    return jsonify({"status": "reset"})
Frontend: Add a reset button and fetch call.
Show All Categories: Modify /track to return totals for all categories and display them in a list.
Step 8: Deploy (Optional)
Backend:
Create requirements.txt:
text

Collapse

Wrap

Copy
flask
Create Procfile:
text

Collapse

Wrap

Copy
web: python app.py
Deploy to Heroku:
bash

Collapse

Wrap

Copy
heroku create
git init
git add .
git commit -m "Initial commit"
git push heroku main
Update frontend to use the Heroku URL (e.g., https://your-app.herokuapp.com/track).
Frontend: Upload index.html to Netlify or GitHub Pages.
Final Notes
Backend: Stays basic with Python and SQLite—no external libraries beyond Flask.
Frontend: Simple and standalone, easy to extend.
Next Steps: Test with different categories and amounts, then let me know if you want to add features or need help debugging!
Let me know how it goes or if you hit any snags—I’m here to assist!



// budget_tracker project